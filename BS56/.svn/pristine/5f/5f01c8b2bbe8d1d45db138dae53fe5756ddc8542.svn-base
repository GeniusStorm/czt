/*
 * Copyright (c) 2017, All rights reserved.
 */
package com.ztel.app.web.ctrl.perform;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.ztel.app.service.PubService;
import com.ztel.app.service.perform.DeptmonthsumService;
import com.ztel.app.vo.perform.DeptmonthLineVo;
import com.ztel.app.vo.perform.DeptmonthsumVo;
import com.ztel.app.vo.perform.KeyworkVo;
import com.ztel.app.vo.perform.TransverseAssessVo;
import com.ztel.app.vo.sys.UserVo;
import com.ztel.framework.util.DateUtil;
import com.ztel.framework.vo.Pagination;
import com.ztel.framework.web.ctrl.BaseCtrl;

/**
 * @author lcf
 * @since 2017年2月26日
 * 绩效考核
 */
@Controller
@RequestMapping("/perform/deptmonthsum")
public class DeptmonthsumCtrl extends BaseCtrl {
	
	private static Logger logger = LogManager.getLogger(DeptmonthsumCtrl.class);
	
	@Autowired
	private DeptmonthsumService deptmonthsumService = null;
	
	@Autowired
	private PubService pubService = null;
	
	/**
	 * 绩效考核
	 * @param request
	 * @return
	 */
	@RequestMapping("todeptmonthsum")
	public String index(HttpServletRequest request) {
		//String damagedtype = request.getParameter("damagedtype");//破损类别(10：来烟破损，20：称重异常)
		//request.setAttribute("damagedtype", damagedtype);
		return "/perform/v_deptmonthsum";
	}
	
	/**
	 * 绩效考核
	 * @param request
	 * @return
	 */
	@RequestMapping("todeptmonthsumadd")
	public String todeptmonthsumadd(HttpServletRequest request) {
		//String damagedtype = request.getParameter("damagedtype");//破损类别(10：来烟破损，20：称重异常)
		//request.setAttribute("damagedtype", damagedtype);
		return "/perform/v_deptmonthsumadd";
	}
	
	@RequestMapping(value="getDeptmonthsumPageList")
	 @ResponseBody
	 public Map<String, Object> getDeptmonthsumPageList(DeptmonthsumVo deptmonthsumVo, HttpServletRequest request) throws Exception{
		 Map<String, Object> result=new HashMap<String, Object>();  
		 
		// String keyword = transverseAssessVo.getKeyword();
		 String searchtime = request.getParameter("searchtime");
		 if(searchtime==null)searchtime=DateUtil.getyyyy_mm()+"-01";
		 //if(searchtime==null)searchtime="2017-02-01";
		 String searchtime2 = request.getParameter("searchtime2");
		 if(searchtime2==null)searchtime2=DateUtil.getyyyy_mm_dd();
		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
		 if(searchtime!=null&&!searchtime.equals("")){
				Date searchtimeD = sdf.parse(searchtime);
				Date searchtime2D = sdf.parse(searchtime2);
				deptmonthsumVo.setBegintime(searchtimeD);
				deptmonthsumVo.setEndtime(searchtime2D);
		 }
		 
		Pagination<?> page = this.getPagination(request);
		if (deptmonthsumVo!=null) {
			 page.setParam(deptmonthsumVo);
		}
		List<DeptmonthsumVo> deptmonthsumVoList = new ArrayList<DeptmonthsumVo>();
		deptmonthsumVoList = deptmonthsumService.selectDeptmonthsumPageList(page);
		
		 result.put("rows",deptmonthsumVoList);  
		 result.put("total",page.getTotalCount());  
		 
		return result;
	}
	


	
	 /**
	  * 新增绩效考核
	  * @return
	  */
	 @RequestMapping(value="doSave")
	 @ResponseBody
	 public  Map<String, Object> doSave(HttpServletRequest request) throws Exception
	 {
		 Map<String, Object> map=new HashMap<String, Object>();
		 String scoremonth_new = request.getParameter("scoremonth_new");//考核日期
		 if(scoremonth_new==null||scoremonth_new.equals(""))scoremonth_new=DateUtil.getyyyy_mm()+"-01";
		 if(scoremonth_new.length()==10)scoremonth_new = scoremonth_new.substring(0, 7);
		 
		 String matters_new = request.getParameter("matters_new");//需注意工作事项
		 String unfinished_new = request.getParameter("unfinished_new");//未完成事项说明
		 
		 String scoresum  = request.getParameter("scoresum");//自评后的合计
		 if(scoresum==null)scoresum="0";

		 
		 String obid = request.getParameter("obid");//id
		 Long id = 0L;
		 if(obid!=null&&!obid.equals("0")){//第二次插入
			 id = new Long(obid);
		 }
		 else
			 {//首次插入
			 id = pubService.getSequence("S_PERFORM_DEPTMONTHSUM");
			 }
		 
		 Long userid = 0L;
		 int deptid = 0;
		 String username = "";
		 UserVo userVo = (UserVo)request.getSession().getAttribute("userVo");
		 if(userVo!=null&&userVo.getUsername().trim().length()>0){
			 userid = userVo.getId();
			 deptid = userVo.getDeptid();
			 username = userVo.getUsername();
		 }
		 //考核主表
		 DeptmonthsumVo deptmonthsumVo = new DeptmonthsumVo();
		 deptmonthsumVo.setId(id);
		 deptmonthsumVo.setScoremonth(scoremonth_new);//得分年月
		 deptmonthsumVo.setCreatetime(new Date());
		 deptmonthsumVo.setSelfscore(new BigDecimal(scoresum));
		 deptmonthsumVo.setSelfid(userid);
		 deptmonthsumVo.setCtype(new Short("10"));//10：副部长考核  20：部长考核
		 deptmonthsumVo.setStatus(new Short("10"));//10,自评未完成  20,自评完成   30:部长评分完成  40,总经理评分完成
		 deptmonthsumVo.setBelongdept(new Long((long)deptid));
		 
		//考核明细
		 List<DeptmonthLineVo> deptmonthLineVoList = new ArrayList<DeptmonthLineVo>();
		 String updated  = request.getParameter("updaterows");
		 if(updated != null){
			  	    //把json字符串转换成对象
			  	    List<KeyworkVo> listUpdated = JSON.parseArray(updated, KeyworkVo.class);
			  	    if(listUpdated!=null&&listUpdated.size()>0){
			  	    	for(int i=0;i<listUpdated.size();i++){
			  	    		KeyworkVo keyworkVo1 = listUpdated.get(i);
			  	    		DeptmonthLineVo deptmonthLineVo = new DeptmonthLineVo();
			  	    		deptmonthLineVo.setFid(id);
			  	    		deptmonthLineVo.setCtype(new BigDecimal(keyworkVo1.getCtype()));
			  	    		deptmonthLineVo.setEvalitemid(keyworkVo1.getId().longValue());
			  	    		deptmonthLineVo.setFinishnote(keyworkVo1.getFinishdone());
			  	    		deptmonthLineVo.setSelfscore(keyworkVo1.getSelfscore());
			  	    		deptmonthLineVo.setNote(keyworkVo1.getNote());
			  	    		deptmonthLineVo.setWeight(keyworkVo1.getWeight());
			  	    		deptmonthLineVoList.add(deptmonthLineVo);
			  	    	}
			  	    }
			  	}
		 
		
		 try{
			// transverseAssessService.insertTransverseAssess(transverseAssessVo);
			 deptmonthsumService.insertDeptmonthsum(deptmonthsumVo, deptmonthLineVoList);
		 map.put("msg", "新增成功");
		 }catch(Exception e){
			 map.put("msg", "新增失败");
			 e.printStackTrace();
		 }
		 map.put("total", "1");
		 return map;
	 }
	 
	 
	 /**
	  * 审核
	  * @return
	  */
	 @RequestMapping(value="doAudit")
	 @ResponseBody
	 public  Map<String, Object> doAudit(HttpServletRequest request)
	 {
		 Map<String, Object> map=new HashMap<String, Object>();
		 String id = request.getParameter("asid");
		 String amount = request.getParameter("amount");//入库单号
		 
		 TransverseAssessVo transverseAssessVo = new TransverseAssessVo();
		 UserVo userVo = (UserVo)request.getSession().getAttribute("userVo");
		 if(userVo!=null&&userVo.getUsername().trim().length()>0){
			 transverseAssessVo.setAssessid(userVo.getId());
			 transverseAssessVo.setAssessname(userVo.getUsername());
			 transverseAssessVo.setAssessdate(new Date());
		 }
		 transverseAssessVo.setId(new BigDecimal(id));
		 transverseAssessVo.setAmount(new BigDecimal(amount));;
		 transverseAssessVo.setFlag("20");
		 try{
			// transverseAssessService.doAudit(transverseAssessVo);
			// cigarettedamagedService.doAudit(cigarettedamagedVo);
		 
		 map.put("msg", "审核成功");
		 }catch(Exception e){
			 map.put("msg", "审核失败");
			 e.printStackTrace();
		 }
		 map.put("total", "1");
		 return map;
	 }
	 
	 
	
	 /**
	  * 删除
	  * @return
	  */
	 @RequestMapping(value="doDel")
	 @ResponseBody
	 public  Map<String, Object> doDel(HttpServletRequest request)
	 {
		 Map<String, Object> resultMap=new HashMap<String, Object>();  
			
		 String id = request.getParameter("id");
		 if(id==null||id.equals(""))id="0";

		 try{
			// transverseAssessService.doDel(new BigDecimal(id));
		 resultMap.put("msg", "删除成功！");
		 }catch(Exception e){
			 resultMap.put("msg", "删除失败！");
		 }
		 resultMap.put("total", 1);
		 return resultMap;
	 }
	 

	
}
	
    
