package com.ztel.app.service.cost.impl;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ztel.app.persist.mybatis.cost.SPLApplyListLineVoMapper;
import com.ztel.app.persist.mybatis.cost.SPLApplyListVoMapper;
import com.ztel.app.persist.mybatis.cost.SPLTypeStockVoMapper;
import com.ztel.app.persist.mybatis.cost.SuppliesImpVoMapper;
import com.ztel.app.service.cost.SPLApplyListService;
import com.ztel.app.vo.cost.SPLApplyListLineVo;
import com.ztel.app.vo.cost.SPLApplyListVo;
import com.ztel.app.vo.cost.SPLTypeStockVo;
import com.ztel.app.vo.cost.SuppliesImpVo;
import com.ztel.framework.vo.Pagination;

@Service
public class SPLApplyListServiceImpl implements SPLApplyListService {

	@Autowired
	private SPLApplyListVoMapper SPLApplyListVoMapper = null;
	@Autowired
	SuppliesImpVoMapper suppliesImpVoMapper = null;//物资入库mapper
	@Autowired
	SPLApplyListLineVoMapper sPLApplyListLineVoMapper = null;//领料申请明细
	@Autowired
	SPLTypeStockVoMapper sPLTypeStockVoMapper = null;
	
	private Map<String, String> sortKeyMapping = new HashMap<>();
	
	public SPLApplyListServiceImpl(){
		sortKeyMapping.put("applydate", "applydate");
		sortKeyMapping.put("id", "id");
		sortKeyMapping.put("deptname", "deptname");
	}
	public List<SPLApplyListVo> getApplyListList(Pagination<?> page)
	{
		page.sortKeyToColumn(sortKeyMapping);
		return SPLApplyListVoMapper.selectApplyListPageList(page);
		
	}
	
	/**
	 * 领料新增
	 */
	@Transactional(rollbackFor=Exception.class)
	public void doAddApplyList(SPLApplyListVo sPLApplyListVo,SPLApplyListLineVo sPLApplyListLineVo)
	{
		//插入申请领料主表
		SPLApplyListVoMapper.insertSelective(sPLApplyListVo);
		BigDecimal listid = sPLApplyListVo.getId();//物资申请id
		BigDecimal typeid = sPLApplyListLineVo.getTypeid();//物资类别id
		BigDecimal preapplyqty = sPLApplyListLineVo.getPreapplyqty();//申请前剩余库存量
		
		BigDecimal applyQty = sPLApplyListLineVo.getApplyqty();//申请数量
		BigDecimal   applyQtyTmp   =   new   BigDecimal("1");
		BigDecimal   preapplyqtyTmp   =   new   BigDecimal("1"); 
		applyQtyTmp = applyQty;
		preapplyqtyTmp = preapplyqty;
		//根据类型id获取物资列表，先进先出
		List<SuppliesImpVo> suppliesImpVoList = suppliesImpVoMapper.getSuppliesImpListByTypeid(typeid+"");
		if(suppliesImpVoList!=null&&suppliesImpVoList.size()>0){
			for(int i=0;i<suppliesImpVoList.size();i++)
			{
				SuppliesImpVo SuppliesImpVo = suppliesImpVoList.get(i);
				Integer splid = SuppliesImpVo.getId();
				BigDecimal quantity = SuppliesImpVo.getQuantity();//入库物资剩余数量
				BigDecimal lockqty = SuppliesImpVo.getLockqty();//锁定数量
				BigDecimal canuseqty = quantity.subtract(lockqty);//可用数量
				BigDecimal price = SuppliesImpVo.getPrice();//设备单价
				if(applyQtyTmp.compareTo(canuseqty)==1){//申请数量>可用数量(compareTo返回-1表示小于,0是等于,1是大于)
					//插入明细及更新库存的申请数量字段
					doInsertLineAndUpdateStock(listid,splid,typeid,preapplyqtyTmp,applyQtyTmp,price);
					preapplyqtyTmp = preapplyqtyTmp.subtract(quantity);
					applyQtyTmp = applyQtyTmp.subtract(quantity);
				}
				else//申请数量<剩余数量，则直接入明细，跳出循环
				{
					//插入明细及更新库存的申请数量字段
					doInsertLineAndUpdateStock(listid,splid,typeid,preapplyqtyTmp,applyQtyTmp,price);
					break;
				}
			}
			
		}
	}
	
	/**
	 * 插入明细及更新库存的申请数量字段
	 * @param listid 申请单id
	 * @param splid  物资id
	 * @param typeid  物资类型id
	 * @param preapplyqty 申请前库存量
	 * @param applyQty 申请数量
	 * @param price 申请设备单价
	 */
	private void doInsertLineAndUpdateStock(BigDecimal listid,Integer splid,BigDecimal typeid,BigDecimal preapplyqty,BigDecimal applyQty,BigDecimal price){
		SPLApplyListLineVo sPLAPPLYLISTLINE = new SPLApplyListLineVo();
		sPLAPPLYLISTLINE.setListid(listid);
		sPLAPPLYLISTLINE.setTypeid(typeid);
		sPLAPPLYLISTLINE.setSplid(splid);
		sPLAPPLYLISTLINE.setPreapplyqty(preapplyqty);
		sPLAPPLYLISTLINE.setApplyqty(applyQty);
		sPLAPPLYLISTLINE.setPrice(price);
		BigDecimal amount =  applyQty.multiply(price);//总金额
		sPLAPPLYLISTLINE.setAmount(amount);
		sPLApplyListLineVoMapper.insertSelective(sPLAPPLYLISTLINE);
		
		//更新物资表中的锁定数量：
		SuppliesImpVo SuppliesImpVo = new SuppliesImpVo();
		SuppliesImpVo.setId(splid);
		SuppliesImpVo.setLockqty(applyQty);
		suppliesImpVoMapper.updateByPrimaryKeySelective(SuppliesImpVo);
		
		//更新库存
		SPLTypeStockVo  SPLTypeStockVo = new SPLTypeStockVo();
		SPLTypeStockVo.setTypeid(typeid.intValue());
		SPLTypeStockVo.setApplyqty(applyQty);
		sPLTypeStockVoMapper.updateSPLTYPESTOCKByTypeId(SPLTypeStockVo);
	}
}
