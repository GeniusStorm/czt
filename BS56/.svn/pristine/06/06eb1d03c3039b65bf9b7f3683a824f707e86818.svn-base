package com.ztel.app.service.cost.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ztel.app.persist.mybatis.cost.SPLTypeInfoVoMapper;
import com.ztel.app.persist.mybatis.cost.SPLTypeStockVoMapper;
import com.ztel.app.service.cost.SPLTypeServcie;
import com.ztel.app.vo.cost.SPLTypeInfoVo;
import com.ztel.app.vo.cost.SPLTypeStockVo;
@Service
public class SPLTypeServiceImpl implements SPLTypeServcie {

	@Autowired
	private SPLTypeInfoVoMapper sPLTypeInfoVoMapper = null;
	@Autowired
	private SPLTypeStockVoMapper sPLTypeStockVoMapper = null;
	
	@Override
	public List<SPLTypeInfoVo> getSPLTypeList(String id) {
		// TODO Auto-generated method stub
		List<SPLTypeInfoVo> resultList = new ArrayList<SPLTypeInfoVo>();
		
		List<SPLTypeInfoVo> oneMenuList = this.sPLTypeInfoVoMapper.getSPLTypeInfoList(id);
		  //判断一级栏目是否有值
		  if (oneMenuList!=null&&oneMenuList.size()>0) {
			  for (int i = 0; i < oneMenuList.size(); i++) {
				  SPLTypeInfoVo oneMenuinfo =oneMenuList.get(i);
				  oneMenuinfo.setState("closed");
				  Integer oneparentId = oneMenuinfo.getId();
				  //根据一级id获取二级子栏目信息
				  List<SPLTypeInfoVo> TwoMenuList = this.sPLTypeInfoVoMapper.getSPLTypeInfoList(oneparentId+"");
				  if(TwoMenuList!=null&&TwoMenuList.size()>0){
					  for(int j=0;j<TwoMenuList.size();j++){
						  SPLTypeInfoVo TwoMenuInfoVo = TwoMenuList.get(j);
							  TwoMenuInfoVo.setState("closed");
					  }
				  }
				  else
				  {
					  oneMenuinfo.setState("open");
				  }
			}
			  resultList=oneMenuList;
		}
		
		return resultList;
	}
	
	public int doAddSPLTypeInfo(SPLTypeInfoVo sPLTypeInfoVo){
		//菜单级次需要设置，传过来的参数是父菜单的级次，需要在父菜单的基础上加1
		if(sPLTypeInfoVo!=null && sPLTypeInfoVo.getClevel()!=null){
			Integer id = sPLTypeInfoVo.getClevel();
			sPLTypeInfoVo.setClevel(id+1);
		}
		else
		{
			Integer id = 1;
			sPLTypeInfoVo.setFid(0);
			sPLTypeInfoVo.setClevel(id);
		}
		return this.sPLTypeInfoVoMapper.insertSelective(sPLTypeInfoVo);
	}

	public int doEditSPLTypeInfo(SPLTypeInfoVo sPLTypeInfoVo){
		if(sPLTypeInfoVo!=null&&sPLTypeInfoVo.getIsproducename()!=null&&sPLTypeInfoVo.getIsproducename().equals("是"))
			{
			sPLTypeInfoVo.setIsproduce("10");
			}
		else{
			sPLTypeInfoVo.setIsproduce("0");
		}
		return this.sPLTypeInfoVoMapper.updateByPrimaryKeySelective(sPLTypeInfoVo);
	}
	
	public int doDelSPLTypeInfo(Integer typeid)
	{
		int result=0;
		//删除前需先判断商品是否还有库存，否则不允许删除
		SPLTypeStockVo sPLTypeStockVo = sPLTypeStockVoMapper.selectSPLTYPESTOCKByTypeId(typeid);
		
	if(sPLTypeStockVo!=null){
		BigDecimal surplusQty = sPLTypeStockVo.getSurplusqty();//设备剩余数量
			
			BigDecimal bd0=BigDecimal.valueOf(0);
			if(surplusQty.compareTo(bd0)==0){//剩余数量为0
				result  = deDel(typeid);
			}
			else{
				result= 0;
			}
			
		}
		else//没有进库存，可删除
		{
			result  = deDel(typeid);
		}
	return result;
	}
	
	private int deDel(Integer typeid)
	{
		SPLTypeInfoVo sPLTypeInfoVo1 = new SPLTypeInfoVo();
		sPLTypeInfoVo1.setId(typeid);
		sPLTypeInfoVo1.setDelstatus("0");
		return this.sPLTypeInfoVoMapper.updateByPrimaryKeySelective(sPLTypeInfoVo1);
	}
		
}
