package com.ztel.app.service.wms.Impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ztel.app.service.produce.SortTroughService;
import com.ztel.app.service.wms.ATSCellInfoDetailVoService;
import com.ztel.app.service.wms.InventorySumVoService;
import com.ztel.app.service.wms.StorageAreaInOutService;
import com.ztel.app.service.wms.WmsPubServcie;
import com.ztel.app.util.Constant;
import com.ztel.app.vo.produce.SortTroughVo;
import com.ztel.app.vo.wms.ATSCellInfoDetailVo;
import com.ztel.app.vo.wms.InBoundVo;
import com.ztel.app.vo.wms.InventoryLineVo;
import com.ztel.app.vo.wms.InventorySumVo;
import com.ztel.app.vo.wms.ItemStockVo;
import com.ztel.app.vo.wms.StorageAreaInOutVo;
@Service
public class InventorySumVoServiceImpl implements InventorySumVoService {

    @Autowired
    private WmsPubServcie wmsPubServcie = null;
    
    @Autowired
    private ATSCellInfoDetailVoService atsCellInfoDetailVoService = null;
    
    @Autowired
    private StorageAreaInOutService storageAreaInOutService = null;
    
    @Autowired
    private SortTroughService sortTroughService = null;
//	/**
//	 * 盘点信息完善,需要传入五个区的盘点数据
//	 */
//	@Override
//	@Transactional(rollbackFor=Exception.class)
//	public void doInventoryComplete(String inventoryId, List<ATSCellInfoDetailVo> atsCellList,List<InventoryLineVo> scatteredList,List<SortTroughVo> troughList,List<SortTroughVo> shelfList) {
//		// TODO Auto-generated method stub
//		BigDecimal fid=new BigDecimal(inventoryId);
//		int listLen=0;
//		//遍历插入立库盘点数据
//		if(atsCellList!=null&&atsCellList.size()>0){
//			listLen=atsCellList.size();
//			ATSCellInfoDetailVo atsCellInfoDetailVo=new ATSCellInfoDetailVo();
//			for(int i=0;i<listLen;i++){
//				atsCellInfoDetailVo=atsCellList.get(i);
//				InventoryLineVo inventoryLineVo=new InventoryLineVo();
//				inventoryLineVo.setInventoryid(fid);
//				inventoryLineVo.setCigarettecode(atsCellInfoDetailVo.getCigarettecode());
//				inventoryLineVo.setCigarettename(atsCellInfoDetailVo.getCigarettename());
//				inventoryLineVo.setBoxqty(atsCellInfoDetailVo.getQty());
//				inventoryLineVo.setAreaid(new BigDecimal(Constant.storagearea_lk));
//				inventoryLineVo.setInventorytype(new BigDecimal(10));
//				
//				doInventoryLineAdd(inventoryLineVo);
//			}
//		}
//		//遍历插入散烟区盘点数据
//		if(scatteredList!=null&&scatteredList.size()>0){
//			listLen=scatteredList.size();
//			for(int i=0;i<listLen;i++){
//				InventoryLineVo inventoryLineVo=scatteredList.get(i);
//				inventoryLineVo.setInventoryid(fid);
//				inventoryLineVo.setItemqty(inventoryLineVo.getTotalqty());
//				inventoryLineVo.setAreaid(new BigDecimal(Constant.storagearea_sy));
//				inventoryLineVo.setInventorytype(new BigDecimal(10));
//				
//				doInventoryLineAdd(inventoryLineVo);
//				
//				//移除散烟区数据??
//			}
//		}
//		//遍历插入分拣区盘点数据
//		if(troughList!=null&&troughList.size()>0){
//			listLen=troughList.size();
//			SortTroughVo sortTroughVo=new SortTroughVo();
//			for(int i=0;i<listLen;i++){
//				sortTroughVo=troughList.get(i);
//				InventoryLineVo inventoryLineVo=new InventoryLineVo();
//				inventoryLineVo.setInventoryid(fid);
//				inventoryLineVo.setCigarettecode(sortTroughVo.getCigarettecode());
//				inventoryLineVo.setCigarettename(sortTroughVo.getCigarettename());
//				inventoryLineVo.setTroughno(sortTroughVo.getTroughnum());
//				inventoryLineVo.setItemqty(sortTroughVo.getLastmantissa());
//				inventoryLineVo.setAreaid(new BigDecimal(Constant.storagearea_fj));
//				inventoryLineVo.setInventorytype(new BigDecimal(10));
//				
//				doInventoryLineAdd(inventoryLineVo);
//				
//				//移除散烟区数据？？，更新通道表尾数------------------
//			}
//		}
//		//遍历插入重力式货架盘点数据
//		if(shelfList!=null&&shelfList.size()>0){
//			listLen=shelfList.size();
//			SortTroughVo sortTroughVo=new SortTroughVo();
//			for(int i=0;i<listLen;i++){
//				sortTroughVo=shelfList.get(i);
//				InventoryLineVo inventoryLineVo=new InventoryLineVo();
//				inventoryLineVo.setInventoryid(fid);
//				inventoryLineVo.setCigarettecode(sortTroughVo.getCigarettecode());
//				inventoryLineVo.setCigarettename(sortTroughVo.getCigarettename());
//				inventoryLineVo.setTroughno(sortTroughVo.getTroughnum());
//				inventoryLineVo.setBoxqty(sortTroughVo.getLastmantissa());
//				inventoryLineVo.setAreaid(new BigDecimal(Constant.storagearea_zlshj));
//				inventoryLineVo.setInventorytype(new BigDecimal(10));
//				
//				doInventoryLineAdd(inventoryLineVo);
//				
//				//移除散烟区数据？？，更新通道表尾数------------------
//			}
//		}
//		//更新盘点主表状态
//		InventoryVo inventoryVo=new InventoryVo();
//		inventoryVo.setInventoryid(fid);
//		inventoryVo.setStatus(new BigDecimal(10));
//		inventoryVoService.doInventoryUpdate(inventoryVo);
//	}

//	@Override
//	public List<InventoryLineVo> getLastInventoryInfoByCond(InventoryLineVo inventoryLineVo) {
//		// TODO Auto-generated method stub
//		return inventoryLineVoMapper.selectLastInventoryInfoByCond(inventoryLineVo);
//	}
//
//	@Override
//	public List<InventoryLineVo> getInventoryInfoByCond(InventoryLineVo inventoryLineVo) {
//		// TODO Auto-generated method stub
//		return inventoryLineVoMapper.selectInventoryInfoByCond(inventoryLineVo);
//	}

	@Override
	public List<InventorySumVo> selectInventoryList(String searchDate) {
		// TODO Auto-generated method stub
		//取账面量信息
		InBoundVo inBoundVo = new InBoundVo();inBoundVo.getBegintime();
		List<ItemStockVo> itemStockList = wmsPubServcie.getStock(inBoundVo);
		
		//取立库信息
		ATSCellInfoDetailVo atsCellInfoDetailVo=new ATSCellInfoDetailVo();
		atsCellInfoDetailVo.setSearchdate(searchDate);
		List<ATSCellInfoDetailVo> ATSCellInfoDetailVoVoList = new ArrayList<ATSCellInfoDetailVo>();
		ATSCellInfoDetailVoVoList = atsCellInfoDetailVoService.getATSCellInfoSummary(atsCellInfoDetailVo);
		ATSCellInfoDetailVoVoList.remove(ATSCellInfoDetailVoVoList.size()-1);
		
		//散烟区信息
		//最近一次盘点信息查询条件
		 InventoryLineVo inventoryLineVo=new InventoryLineVo();
		 inventoryLineVo.setInventorytype(new BigDecimal(10));
		 inventoryLineVo.setAreaid(new BigDecimal(Constant.storagearea_sy));
		 //散烟汇总查询条件
		 StorageAreaInOutVo storageAreaInOutVo=new StorageAreaInOutVo();
		 storageAreaInOutVo.setSearchdate(searchDate);
		 storageAreaInOutVo.setAreaid(new BigDecimal(Constant.storagearea_sy));
		 List<InventoryLineVo>  inOutList=new ArrayList<InventoryLineVo>();
		 inOutList=storageAreaInOutService.getInOutInfoSummaryByCond(storageAreaInOutVo, inventoryLineVo);
		 
		 //分拣区信息
		//通道尾数查询条件
		 SortTroughVo sortTroughVo=new SortTroughVo();
		 sortTroughVo.setCigarettetype(new BigDecimal(20));
		 sortTroughVo.setTroughtype(new BigDecimal(10));
		 //调拨移库信息
		 StorageAreaInOutVo storageAreaInOutVo_fj=new StorageAreaInOutVo();
		 storageAreaInOutVo_fj.setSearchdate(searchDate);
		 storageAreaInOutVo_fj.setAreaid(new BigDecimal(Constant.storagearea_fj));
		 List<SortTroughVo>  troughList=new ArrayList<SortTroughVo>();
		 troughList=sortTroughService.getSortTroughSummaryByCond(storageAreaInOutVo_fj, sortTroughVo);
		 //由于分拣区卷烟品牌会有重复,将重复品牌组成List放入Map
		 Map<String, List<SortTroughVo>>sortMap=new TreeMap<>();
		 int len=troughList.size();String cigarettecode="";
		 SortTroughVo vo=new SortTroughVo();
		 for(int i=0;i<len;i++){
			 vo=troughList.get(i);
			 cigarettecode=vo.getCigarettecode();
			 List<SortTroughVo>list=null;
			 if(sortMap.containsKey(cigarettecode)){
				 list=sortMap.get(cigarettecode);
			 }else{
				 list=new ArrayList<SortTroughVo>();
			 }
			 list.add(vo);
			 sortMap.put(cigarettecode, list);
		 }
		 
		 //重力式货架信息
		//通道尾数查询条件
		 SortTroughVo sortTroughVo1=new SortTroughVo();
		 sortTroughVo1.setCigarettetype(new BigDecimal(20));
		 sortTroughVo1.setTroughtype(new BigDecimal(20));
		 //调拨移库信息
		 StorageAreaInOutVo storageAreaInOutVo_zlshj=new StorageAreaInOutVo();
		 storageAreaInOutVo_zlshj.setSearchdate(searchDate);
		 storageAreaInOutVo_zlshj.setAreaid(new BigDecimal(Constant.storagearea_zlshj));
		 List<SortTroughVo>  zlshjList=new ArrayList<SortTroughVo>();
		 zlshjList=sortTroughService.getSortTroughSummaryByCond(storageAreaInOutVo_zlshj, sortTroughVo1);
		//由于重力式货架区卷烟品牌会有重复,将重复品牌组成List放入Map
		 Map<String, List<SortTroughVo>>shelfMap=new TreeMap<>();
		 len=zlshjList.size();
		 //SortTroughVo vo=new SortTroughVo();
		 for(int i=0;i<len;i++){
			 vo=zlshjList.get(i);
			 cigarettecode=vo.getCigarettecode();
			 List<SortTroughVo>list=null;
			 if(shelfMap.containsKey(cigarettecode)){
				 list=shelfMap.get(cigarettecode);
			 }else{
				 list=new ArrayList<SortTroughVo>();
			 }
			 list.add(vo);
			 shelfMap.put(cigarettecode, list);
		 }
		 
		 //异型烟一区
		//通道尾数查询条件
		 SortTroughVo sortTroughVo_yx1=new SortTroughVo();
		 sortTroughVo_yx1.setUncigarettetype(new BigDecimal(20));
		 sortTroughVo_yx1.setTroughtype(new BigDecimal(10));
		 sortTroughVo_yx1.setGroupno(new BigDecimal(1));
		//调拨移库信息
		 //StorageAreaInOutVo storageAreaInOutVo_fj=new StorageAreaInOutVo();
		 //storageAreaInOutVo_fj.setSearchdate(searchDate);
		 //storageAreaInOutVo_fj.setAreaid(new BigDecimal(Constant.storagearea_fj));
		 List<SortTroughVo>  untroughList1=new ArrayList<SortTroughVo>();
		 untroughList1=sortTroughService.getSortTroughSummaryByCond(storageAreaInOutVo_fj, sortTroughVo_yx1);
			 
		 //异型烟二区
		//通道尾数查询条件
		 SortTroughVo sortTroughVo_yx2=new SortTroughVo();
		 sortTroughVo_yx2.setUncigarettetype(new BigDecimal(20));
		 sortTroughVo_yx2.setTroughtype(new BigDecimal(10));
		 sortTroughVo_yx2.setGroupno(new BigDecimal(2));
		//调拨移库信息
		 //StorageAreaInOutVo storageAreaInOutVo_fj=new StorageAreaInOutVo();
		 //storageAreaInOutVo_fj.setSearchdate(searchDate);
		 //storageAreaInOutVo_fj.setAreaid(new BigDecimal(Constant.storagearea_fj));
		 List<SortTroughVo>  untroughList2=new ArrayList<SortTroughVo>();
		 untroughList2=sortTroughService.getSortTroughSummaryByCond(storageAreaInOutVo_fj, sortTroughVo_yx2);
		 
		 //公共区
		//通道尾数查询条件
		 SortTroughVo sortTroughVo_yx3=new SortTroughVo();
		 sortTroughVo_yx3.setUncigarettetype(new BigDecimal(20));
		 sortTroughVo_yx3.setTroughtype(new BigDecimal(10));
		 sortTroughVo_yx3.setGroupno(new BigDecimal(3));
		//调拨移库信息
		 //StorageAreaInOutVo storageAreaInOutVo_fj=new StorageAreaInOutVo();
		 //storageAreaInOutVo_fj.setSearchdate(searchDate);
		 //storageAreaInOutVo_fj.setAreaid(new BigDecimal(Constant.storagearea_fj));
		 List<SortTroughVo>  untroughList3=new ArrayList<SortTroughVo>();
		 untroughList3=sortTroughService.getSortTroughSummaryByCond(storageAreaInOutVo_fj, sortTroughVo_yx3);
		 
		 //组装数据
		 List<InventorySumVo>  resultList=new ArrayList<InventorySumVo>();
		 int stockLen=itemStockList.size();
		 int lklen=ATSCellInfoDetailVoVoList.size();
		 int sylen=inOutList.size();
		 int un1len=untroughList1.size();
		 int un2len=untroughList2.size();
		 int un3len=untroughList3.size();
		 //String cigarettecode="";
		 BigDecimal diffqty=new BigDecimal(0);
		 BigDecimal paperqty=null,ATSCellqty=null,scatteredqty=null,shelfqty=null,sortingqty=null,
				 			 unnormalqty1=null,unnormalqty2=null,commonqty=null;
		 String cigarettename="",shelfno="",sortingno="",unnormalno1="",unnormalno2="",commonno="";
				 
		 InventorySumVo sumVo=null;
		 //账面量品牌为基数
		 for(int a=0;a<stockLen;a++){
			 ItemStockVo v=itemStockList.get(a);
			 cigarettecode=v.getCigarettecode();
			 cigarettename=v.getCigarettename()+"";
			 
			 paperqty=v.getSumitemqty();
			 diffqty=v.getSumitemqty();
			 //立库数量
			 for(int b=0;b<lklen;b++){
				 ATSCellInfoDetailVo cellInfoDetailVo=ATSCellInfoDetailVoVoList.get(b);
				 if(cigarettecode.equals(cellInfoDetailVo.getCigarettecode())){
					 ATSCellqty=cellInfoDetailVo.getQty().multiply(cellInfoDetailVo.getJt_size());//立库数量件转条
					 //sumVo.setATSCellqty(ATSCellqty);
					 diffqty=diffqty.subtract(ATSCellqty);
					 break;
				 }
			 }
			 //散烟区数量
			 for(int b=0;b<sylen;b++){
				 InventoryLineVo InventoryLineVo=inOutList.get(b);
				 if(cigarettecode.equals(InventoryLineVo.getCigarettecode())){
					 scatteredqty=InventoryLineVo.getTotalqty();
					 //sumVo.setScatteredqty(scatteredqty);
					 diffqty=diffqty.subtract(scatteredqty);
					 break;
				 }
			 }
			 //异型烟一区数量
			 for(int b=0;b<un1len;b++){
				 SortTroughVo troughVo1=untroughList1.get(b);
				 if(cigarettecode.equals(troughVo1.getCigarettecode())){
					 unnormalno1=troughVo1.getTroughnum();
					 unnormalqty1=troughVo1.getFillqty();
					 //sumVo.setUnnormalno1(unnormalno1);
					 //sumVo.setUnnormalqty1(unnormalqty1);
					 diffqty=diffqty.subtract(unnormalqty1);
					 break;
				 }
			 }
			 //异型烟二区数量
			 for(int b=0;b<un2len;b++){
				 SortTroughVo troughVo2=untroughList2.get(b);
				 if(cigarettecode.equals(troughVo2.getCigarettecode())){
					 unnormalno2=troughVo2.getTroughnum();
					 unnormalqty2=troughVo2.getFillqty();
					 if(unnormalqty2==null)unnormalqty2=new BigDecimal(0);
					 //sumVo.setUnnormalno2(unnormalno2);
					 //sumVo.setUnnormalqty2(unnormalqty2);
					 diffqty=diffqty.subtract(unnormalqty2);
					 break;
				 }
			 }
			 //异型烟三区(公共区)数量
			 for(int b=0;b<un3len;b++){
				 SortTroughVo troughVo3=untroughList3.get(b);
				 if(cigarettecode.equals(troughVo3.getCigarettecode())){
					 commonno=troughVo3.getTroughnum();
					 commonqty=troughVo3.getFillqty();
					 //sumVo.setCommonno(commonno);
					 //sumVo.setCommonqty(commonqty);
					 diffqty=diffqty.subtract(commonqty);
					 break;
				 }
			 }
			 
			 //分拣区和重力式货架   有重复的品牌
			 if(sortMap.containsKey(cigarettecode)||shelfMap.containsKey(cigarettecode)){
				 List<SortTroughVo>sList=sortMap.get(cigarettecode);
				 List<SortTroughVo>zList=shelfMap.get(cigarettecode);
				 int slen=0;if(sList!=null)slen=sList.size();
				 int zlen=0;if(zList!=null)zlen=zList.size();
				 //计算差额
				 SortTroughVo troughVo=new SortTroughVo();;
				 //分拣区
				 for(int d=0;d<slen;d++){
					 troughVo=sList.get(d);
					 diffqty=diffqty.subtract(troughVo.getFillqty());
				 }
				 //重力式货架
				 for(int d=0;d<zlen;d++){
					 troughVo=zList.get(d);
					 //System.out.println("diffqty=="+diffqty+"--------------fillqty=="+troughVo.getFillqty()+"--------------Jt_size=="+troughVo.getJt_size());
					 diffqty=diffqty.subtract(troughVo.getFillqty().multiply(troughVo.getJt_size()));//重力式货架数量件转条
				 }
				 //重力式货架通道多于分拣区通道
				 if(zlen>slen){
					 for(int c=0;c<zlen;c++){
						 sumVo=new InventorySumVo();
						 sumVo.setCigarettecode(cigarettecode);
						 sumVo.setCigarettename(cigarettename);
						 sumVo.setPaperqty(paperqty);
						 sumVo.setATSCellqty(ATSCellqty);
						 sumVo.setScatteredqty(scatteredqty);
						 sumVo.setUnnormalno1(unnormalno1);
						 sumVo.setUnnormalqty1(unnormalqty1);
						 sumVo.setUnnormalno2(unnormalno2);
						 sumVo.setUnnormalqty2(unnormalqty2);
						 //diffqty=diffqty.subtract(unnormalqty2);
						 sumVo.setCommonno(commonno);
						 sumVo.setCommonqty(commonqty);
						 
						 troughVo=zList.get(c);
						 shelfno=troughVo.getTroughnum();
						 shelfqty=troughVo.getFillqty().multiply(troughVo.getJt_size());//重力式货架数量件转条
						 
						 sumVo.setShelfno(shelfno);
						 sumVo.setShelfqty(shelfqty);
						 
						 if(c<slen){
							 troughVo=sList.get(c);
							 sortingno=troughVo.getTroughnum();
							 sortingqty=troughVo.getFillqty();
							 
							 sumVo.setSortingno(sortingno);
							 sumVo.setSortingqty(sortingqty);
						 }
						 sumVo.setDiffqty(diffqty);
						 resultList.add(sumVo);
					 }
				 }else{
					 //分拣区通道多于重力式货架通道
					 for(int c=0;c<slen;c++){
						 sumVo=new InventorySumVo();
						 sumVo.setCigarettecode(cigarettecode);
						 sumVo.setCigarettename(cigarettename);
						 sumVo.setPaperqty(paperqty);
						 sumVo.setATSCellqty(ATSCellqty);
						 sumVo.setScatteredqty(scatteredqty);
						 sumVo.setUnnormalno1(unnormalno1);
						 sumVo.setUnnormalqty1(unnormalqty1);
						 sumVo.setUnnormalno2(unnormalno2);
						 sumVo.setUnnormalqty2(unnormalqty2);
						 //diffqty=diffqty.subtract(unnormalqty2);
						 sumVo.setCommonno(commonno);
						 sumVo.setCommonqty(commonqty);
						 
						 troughVo=sList.get(c);
						 sortingno=troughVo.getTroughnum();
						 sortingqty=troughVo.getFillqty();
						 
						 sumVo.setSortingno(sortingno);
						 sumVo.setSortingqty(sortingqty);
						 
						 if(c<zlen){
							 troughVo=zList.get(c);
							 shelfno=troughVo.getTroughnum();
							 shelfqty=troughVo.getFillqty().multiply(troughVo.getJt_size());//重力式货架数量件转条
							 
							 sumVo.setShelfno(shelfno);
							 sumVo.setShelfqty(shelfqty);
						 }
						 sumVo.setDiffqty(diffqty);
						 resultList.add(sumVo);
					 }
				 }
			 }else{
				 sumVo=new InventorySumVo();
				 sumVo.setCigarettecode(cigarettecode);
				 sumVo.setCigarettename(cigarettename);
				 sumVo.setPaperqty(paperqty);
				 //没有分拣以及重力式货架的品牌
				 sumVo.setATSCellqty(ATSCellqty);
				 sumVo.setScatteredqty(scatteredqty);
				 sumVo.setUnnormalno1(unnormalno1);
				 sumVo.setUnnormalqty1(unnormalqty1);
				 sumVo.setUnnormalno2(unnormalno2);
				 sumVo.setUnnormalqty2(unnormalqty2);
				 //System.out.println("diffqty=="+diffqty+"--------------unnormalqty2=="+unnormalqty2);
				 //diffqty=diffqty.subtract(unnormalqty2);
				 sumVo.setCommonno(commonno);
				 sumVo.setCommonqty(commonqty);
				 sumVo.setDiffqty(diffqty);
				 resultList.add(sumVo);
			 }
		 }
		 
		return resultList;
	}
}
